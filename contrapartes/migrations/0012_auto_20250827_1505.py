# Generated by Django 5.0.7 on 2025-08-27 20:05

from django.db import migrations
from django.contrib.auth.models import User


def create_default_estados(apps, schema_editor):
    """Create default estados for contrapartes"""
    EstadoContraparte = apps.get_model('contrapartes', 'EstadoContraparte')
    User = apps.get_model('auth', 'User')
    
    # Try to get the first superuser, or create estados without creado_por
    try:
        admin_user = User.objects.filter(is_superuser=True).first()
        if not admin_user:
            # If no superuser exists, try to get the first staff user
            admin_user = User.objects.filter(is_staff=True).first()
        if not admin_user:
            # If no staff user exists, get the first user
            admin_user = User.objects.first()
    except:
        admin_user = None
    
    # Default estados to create
    default_estados = [
        {
            'codigo': 'activa',
            'nombre': 'Activa',
            'descripcion': 'Contraparte activa y operativa',
            'color': '#10B981',  # Green
        },
        {
            'codigo': 'inactiva',
            'nombre': 'Inactiva',
            'descripcion': 'Contraparte temporalmente inactiva',
            'color': '#6B7280',  # Gray
        },
        {
            'codigo': 'pendiente',
            'nombre': 'Pendiente de Aprobaci贸n',
            'descripcion': 'Contraparte en proceso de aprobaci贸n',
            'color': '#F59E0B',  # Amber
        },
        {
            'codigo': 'rechazada',
            'nombre': 'Rechazada',
            'descripcion': 'Contraparte rechazada por no cumplir requisitos',
            'color': '#EF4444',  # Red
        },
        {
            'codigo': 'en_revision',
            'nombre': 'En Revisi贸n',
            'descripcion': 'Contraparte bajo revisi贸n de debida diligencia',
            'color': '#3B82F6',  # Blue
        },
    ]
    
    for estado_data in default_estados:
        if not EstadoContraparte.objects.filter(codigo=estado_data['codigo']).exists():
            estado_data_copy = estado_data.copy()
            if admin_user:
                estado_data_copy['creado_por'] = admin_user
                EstadoContraparte.objects.create(**estado_data_copy)
            else:
                # If no user available, we'll create a temporary admin user
                print(f"Creating temporary user for estado creation")
                temp_user = User.objects.create_user(
                    username='temp_admin',
                    email='temp@example.com',
                    password='temp_password',
                    is_staff=True,
                    is_superuser=True
                )
                estado_data_copy['creado_por'] = temp_user
                EstadoContraparte.objects.create(**estado_data_copy)


def reverse_default_estados(apps, schema_editor):
    """Remove default estados"""
    EstadoContraparte = apps.get_model('contrapartes', 'EstadoContraparte')
    
    default_codigos = ['activa', 'inactiva', 'pendiente', 'rechazada', 'en_revision']
    EstadoContraparte.objects.filter(codigo__in=default_codigos).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('contrapartes', '0011_estadocontraparte'),
    ]

    operations = [
        migrations.RunPython(create_default_estados, reverse_default_estados),
    ]
