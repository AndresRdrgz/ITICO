# Generated by Django 5.0.7 on 2025-08-27 20:11

from django.db import migrations


def populate_estado_nuevo(apps, schema_editor):
    """Populate estado_nuevo field based on existing estado field"""
    Contraparte = apps.get_model('contrapartes', 'Contraparte')
    EstadoContraparte = apps.get_model('contrapartes', 'EstadoContraparte')
    
    # Create mapping from old estado codes to EstadoContraparte objects
    estado_mapping = {}
    for estado in EstadoContraparte.objects.all():
        estado_mapping[estado.codigo] = estado
    
    # Get default estado in case mapping fails
    default_estado = EstadoContraparte.objects.filter(codigo='pendiente').first()
    
    # Update all contrapartes
    for contraparte in Contraparte.objects.all():
        if contraparte.estado in estado_mapping:
            contraparte.estado_nuevo = estado_mapping[contraparte.estado]
        else:
            # If no mapping found, use default
            contraparte.estado_nuevo = default_estado
        contraparte.save()


def reverse_populate_estado_nuevo(apps, schema_editor):
    """Clear estado_nuevo field"""
    Contraparte = apps.get_model('contrapartes', 'Contraparte')
    Contraparte.objects.update(estado_nuevo=None)


class Migration(migrations.Migration):

    dependencies = [
        ('contrapartes', '0013_contraparte_estado_nuevo'),
    ]

    operations = [
        migrations.RunPython(populate_estado_nuevo, reverse_populate_estado_nuevo),
    ]
