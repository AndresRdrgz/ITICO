# Generated by Django 5.0.7 on 2025-08-25 21:42

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


def create_tipocontraparte_and_migrate_data(apps, schema_editor):
    """Create TipoContraparte instances and migrate existing data"""
    TipoContraparte = apps.get_model('contrapartes', 'TipoContraparte')
    Contraparte = apps.get_model('contrapartes', 'Contraparte')
    User = apps.get_model('auth', 'User')
    
    # Get first superuser or create a system user
    try:
        admin_user = User.objects.filter(is_superuser=True).first()
        if not admin_user:
            admin_user = User.objects.filter(is_staff=True).first()
        if not admin_user:
            # Create system user for data migration
            admin_user = User.objects.create_user(
                username='system', 
                email='system@itico.com',
                is_staff=True,
                is_superuser=True
            )
    except:
        # If no users exist, we'll have to skip this for now
        return
    
    # Default types mapping
    tipos_default = {
        'empresa': {
            'nombre': 'Empresa',
            'descripcion': 'Empresas privadas y comerciales',
            'activo': True
        },
        'persona_natural': {
            'nombre': 'Persona Natural',
            'descripcion': 'Personas físicas',
            'activo': True
        },
        'entidad_publica': {
            'nombre': 'Entidad Pública',
            'descripcion': 'Instituciones y organismos públicos',
            'activo': True
        },
        'ong': {
            'nombre': 'ONG',
            'descripcion': 'Organizaciones No Gubernamentales',
            'activo': True
        },
        'otro': {
            'nombre': 'Otro',
            'descripcion': 'Otros tipos de contrapartes',
            'activo': True
        }
    }
    
    # Create TipoContraparte instances
    tipo_objects = {}
    for codigo, data in tipos_default.items():
        tipo, created = TipoContraparte.objects.get_or_create(
            codigo=codigo,
            defaults={
                'nombre': data['nombre'],
                'descripcion': data['descripcion'],
                'activo': data['activo'],
                'creado_por': admin_user
            }
        )
        tipo_objects[codigo] = tipo
        if created:
            print(f"Created TipoContraparte: {tipo.nombre}")
    
    # Migrate existing contrapartes
    for contraparte in Contraparte.objects.all():
        old_tipo = contraparte.tipo_old  # This will be the string value
        if old_tipo in tipo_objects:
            contraparte.tipo_new = tipo_objects[old_tipo]
            contraparte.save()
            print(f"Migrated {contraparte.nombre}: {old_tipo} -> {tipo_objects[old_tipo].nombre}")
        else:
            # Default to 'otro' if unknown type
            contraparte.tipo_new = tipo_objects['otro']
            contraparte.save()
            print(f"Migrated {contraparte.nombre}: {old_tipo} -> Otro (default)")


def reverse_migration(apps, schema_editor):
    """Reverse the migration"""
    TipoContraparte = apps.get_model('contrapartes', 'TipoContraparte')
    Contraparte = apps.get_model('contrapartes', 'Contraparte')
    
    # Restore old tipo values
    for contraparte in Contraparte.objects.all():
        if contraparte.tipo_new:
            contraparte.tipo_old = contraparte.tipo_new.codigo
            contraparte.save()
    
    # Delete TipoContraparte instances
    TipoContraparte.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contrapartes', '0004_documento'),
    ]

    operations = [
        # 1. Create TipoContraparte model
        migrations.CreateModel(
            name='TipoContraparte',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(help_text='Código único para identificar el tipo (ej: empresa, ong, etc.)', max_length=20, unique=True, verbose_name='Código')),
                ('nombre', models.CharField(help_text='Nombre descriptivo del tipo de contraparte', max_length=100, verbose_name='Nombre')),
                ('descripcion', models.TextField(blank=True, help_text='Descripción detallada del tipo de contraparte', null=True, verbose_name='Descripción')),
                ('activo', models.BooleanField(default=True, help_text='Indica si este tipo está disponible para nuevas contrapartes', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('creado_por', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tipos_contraparte_creados', to=settings.AUTH_USER_MODEL, verbose_name='Creado por')),
            ],
            options={
                'verbose_name': 'Tipo de Contraparte',
                'verbose_name_plural': 'Tipos de Contraparte',
                'ordering': ['nombre'],
            },
        ),
        
        # 2. Rename existing tipo field to tipo_old
        migrations.RenameField(
            model_name='contraparte',
            old_name='tipo',
            new_name='tipo_old',
        ),
        
        # 3. Add new ForeignKey field (nullable for now)
        migrations.AddField(
            model_name='contraparte',
            name='tipo_new',
            field=models.ForeignKey(blank=True, null=True, help_text='Tipo de contraparte', limit_choices_to={'activo': True}, on_delete=django.db.models.deletion.PROTECT, related_name='contrapartes', to='contrapartes.tipocontraparte', verbose_name='Tipo'),
        ),
        
        # 4. Run data migration
        migrations.RunPython(
            create_tipocontraparte_and_migrate_data,
            reverse_migration
        ),
        
        # 5. Make tipo_new required
        migrations.AlterField(
            model_name='contraparte',
            name='tipo_new',
            field=models.ForeignKey(help_text='Tipo de contraparte', limit_choices_to={'activo': True}, on_delete=django.db.models.deletion.PROTECT, related_name='contrapartes', to='contrapartes.tipocontraparte', verbose_name='Tipo'),
        ),
        
        # 6. Remove old field
        migrations.RemoveField(
            model_name='contraparte',
            name='tipo_old',
        ),
        
        # 7. Rename new field to final name
        migrations.RenameField(
            model_name='contraparte',
            old_name='tipo_new',
            new_name='tipo',
        ),
    ]
