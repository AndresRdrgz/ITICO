# Generated by Django 5.0.7 on 2025-08-25 22:30

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


def create_default_tipos_documento_and_migrate_data(apps, schema_editor):
    """Create default document types and migrate existing documents"""
    TipoDocumento = apps.get_model('contrapartes', 'TipoDocumento')
    Documento = apps.get_model('contrapartes', 'Documento')
    User = apps.get_model('auth', 'User')
    
    # Get the first superuser or create a temporary one
    try:
        admin_user = User.objects.filter(is_superuser=True).first()
        if not admin_user:
            admin_user = User.objects.first()
        if not admin_user:
            admin_user = User.objects.create_user(
                username='admin_temp',
                email='admin@temp.com',
                is_staff=True,
                is_superuser=True
            )
    except Exception:
        admin_user_id = 1
    else:
        admin_user_id = admin_user.id

    # Create default document types
    tipos_default = [
        ('cedula', 'Cédula de Ciudadanía', 'Documento de identificación personal para ciudadanos colombianos', False),
        ('pasaporte', 'Pasaporte', 'Documento de identificación para viajes internacionales', True),
        ('cedula_extranjera', 'Cédula de Extranjería', 'Documento de identificación para extranjeros residentes en Colombia', True),
        ('rut', 'RUT', 'Registro Único Tributario', False),
        ('camara_comercio', 'Certificado Cámara de Comercio', 'Certificado de existencia y representación legal', True),
        ('constitucion', 'Escritura de Constitución', 'Documento de constitución de la empresa o entidad', False),
        ('poder', 'Poder/Autorización', 'Documento que otorga poder de representación', True),
        ('contrato', 'Contrato', 'Documento contractual o acuerdo', False),
        ('certificacion', 'Certificación', 'Documento de certificación o acreditación', True),
        ('otro', 'Otro Documento', 'Otros tipos de documentos no categorizados', False),
    ]

    tipo_mapping = {}
    for codigo, nombre, descripcion, requiere_expiracion in tipos_default:
        tipo_doc, created = TipoDocumento.objects.get_or_create(
            codigo=codigo,
            defaults={
                'nombre': nombre,
                'descripcion': descripcion,
                'requiere_expiracion': requiere_expiracion,
                'activo': True,
                'creado_por_id': admin_user_id
            }
        )
        tipo_mapping[codigo] = tipo_doc.id

    # Update the campo tipo to tipo_temp (string) before changing to ForeignKey
    # This will be handled by Django in the schema migration


def reverse_tipos_documento(apps, schema_editor):
    """Reverse the migration"""
    TipoDocumento = apps.get_model('contrapartes', 'TipoDocumento')
    TipoDocumento.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('contrapartes', '0005_auto_20250825_1642'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # Step 1: Create TipoDocumento model
        migrations.CreateModel(
            name='TipoDocumento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(help_text='Código único para identificar el tipo (ej: dd, contrato, etc.)', max_length=20, unique=True, verbose_name='Código')),
                ('nombre', models.CharField(help_text='Nombre descriptivo del tipo de documento', max_length=100, verbose_name='Nombre')),
                ('descripcion', models.TextField(blank=True, help_text='Descripción detallada del tipo de documento', null=True, verbose_name='Descripción')),
                ('requiere_expiracion', models.BooleanField(default=False, help_text='Indica si este tipo de documento requiere fecha de expiración', verbose_name='Requiere fecha de expiración')),
                ('activo', models.BooleanField(default=True, help_text='Indica si este tipo está disponible para nuevos documentos', verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('creado_por', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tipos_documento_creados', to=settings.AUTH_USER_MODEL, verbose_name='Creado por')),
            ],
            options={
                'verbose_name': 'Tipo de Documento',
                'verbose_name_plural': 'Tipos de Documento',
                'ordering': ['nombre'],
            },
        ),
        
        # Step 2: Add temporary field for the tipo conversion
        migrations.AddField(
            model_name='documento',
            name='tipo_temp',
            field=models.CharField(max_length=20, null=True, blank=True),
        ),
        
        # Step 3: Populate default tipos and copy existing tipo values to tipo_temp
        migrations.RunPython(
            create_default_tipos_documento_and_migrate_data,
            reverse_tipos_documento,
        ),
    ]
